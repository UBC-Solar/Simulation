/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void calculate_array_GHI_times(GoInt64* local_times_inPtr, GoInt64 local_times_ptrSize, GoFloat64* day_of_year_outPtr, GoInt64 day_of_year_ptrSize, GoFloat64* local_time_outPtr, GoInt64 local_time_ptrSize);
extern void closest_gis_indices_loop(GoFloat64* averageDistancesPtr, GoInt64 averageDistancesSize, GoFloat64* cumulativeDistancesPtr, GoInt64 cumulativeDistancesSize, GoInt64* resultsPtr, GoInt64 resultsSize);
extern void closest_weather_indices_loop(GoFloat64* cumulativeDistancesPtr, GoInt64 cumulativeDistancesSize, GoFloat64* averageDistancesPtr, GoInt64 averageDistancesSize, GoInt64* resultsPtr, GoInt64 resultsSize);
extern void speeds_with_waypoints_loop(GoFloat64* speeds_inPtr, GoInt64 speeds_ptrSize, GoFloat64* distances_inPtr, GoInt64 distances_ptrSize, GoInt64* waypoints_inPtr, GoInt64 waypoints_ptrSize);
extern void weather_in_time_loop(GoFloat64* unix_timestamps_inPtr, GoFloat64* closest_time_stamp_indices_outPtr, GoFloat64* dt_local_array_inPtr, GoInt64 dt_local_array_inPtr_size, GoInt64 io_ptr_size);

#ifdef __cplusplus
}
#endif
